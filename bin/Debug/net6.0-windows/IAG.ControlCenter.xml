<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IAG.ControlCenter</name>
    </assembly>
    <members>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.CustomerAdminController.RegisterCustomer(IAG.ControlCenter.Distribution.BusinessLayer.Model.CustomerRegistration)">
            <summary>
            Registers a new customer.
            </summary>
            <remarks>
            This endpoint is used to register a new customer based on the provided customer registration data.
            It creates a new customer using the provided information and returns the customer information.
            </remarks>
            <param name="customerRequest">The customer registration data.</param>
            <returns>An action result containing the customer information.</returns>
            <response code="201">Indicates a successful customer registration and returns the created customer information.</response>
            <response code="400">If the customer registration data is null or invalid.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.CustomerAdminController.GetAllCustomers">
            <summary>
            Retrieves all customers.
            </summary>
            <remarks>
            This endpoint is used to retrieve a list of all customers.
            It returns a collection of customer information for all existing customers.
            </remarks>
            <returns>An action result containing a collection of customer information.</returns>
            <response code="200">Indicates a successful retrieval of customers and returns the collection of customer information.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.CustomerAdminController.AddProducts(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Adds products to a customer.
            </summary>
            <remarks>
            This endpoint allows adding products to a specific customer identified by the provided customer ID.
            The productsToAdd parameter should contain a collection of product IDs to be added to the customer's list of products.
            </remarks>
            <param name="customerId">The ID of the customer.</param>
            <param name="productsToAdd">The collection of product IDs to add.</param>
            <returns>An action result indicating the success of the operation.</returns>
            <response code="200">Indicates that the products have been successfully added to the customer.</response>
            <response code="400">If the customerId is empty or if productsToAdd is null.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.CustomerAdminController.RemoveProducts(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Removes products from a customer.
            </summary>
            <remarks>
            This endpoint allows removing products from a specific customer identified by the provided customer ID.
            The productsToRemove parameter should contain a collection of product IDs to be removed from the customer's list of products.
            </remarks>
            <param name="customerId">The ID of the customer.</param>
            <param name="productsToRemove">The collection of product IDs to remove.</param>
            <returns>An action result indicating the success of the operation.</returns>
            <response code="200">Indicates that the products have been successfully removed from the customer.</response>
            <response code="400">If the customerId is empty or if productsToRemove is null.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.CustomerController.GetCustomer(System.Guid)">
            <summary>
            Retrieves customer information.
            </summary>
            <remarks>
            This endpoint allows retrieving information about a specific customer identified by the provided customer ID.
            The customer ID should be included in the route parameter.
            </remarks>
            <param name="customerId">The ID of the customer.</param>
            <returns>An action result containing the customer information.</returns>
            <response code="200">Indicates that the customer information has been successfully retrieved.</response>
            <response code="401">If access to the customer with the specified ID is not allowed.</response>
            <response code="404">If the customer with the specified ID does not exist.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.CustomerController.GetProducts(System.Guid)">
            <summary>
            Retrieves the products associated with a customer.
            </summary>
            <remarks>
            This endpoint allows retrieving the products associated with a specific customer identified by the provided customer ID.
            The customer ID should be included in the route parameter.
            </remarks>
            <param name="customerId">The ID of the customer.</param>
            <returns>An action result containing the list of products associated with the customer.</returns>
            <response code="200">Indicates that the products associated with the customer have been successfully retrieved.</response>
            <response code="401">If access to the customer with the specified ID is not allowed.</response>
            <response code="404">If the customer with the specified ID does not exist.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.CustomerController.GetReleases(System.Guid,System.Guid)">
            <summary>
            Retrieves the releases associated with a specific product for a customer.
            </summary>
            <remarks>
            This endpoint allows retrieving the releases associated with a specific product for a customer.
            The customer ID and product ID should be included in the route parameters.
            </remarks>
            <param name="customerId">The ID of the customer.</param>
            <param name="productId">The ID of the product.</param>
            <returns>An action result containing the list of releases associated with the product for the customer.</returns>
            <response code="200">Indicates that the releases associated with the product for the customer have been successfully retrieved.</response>
            <response code="401">If access to the product or customer is not allowed.</response>
            <response code="404">If the product with the specified ID does not exist.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.CustomerController.GetReleaseFiles(System.Guid,System.Guid,System.Guid)">
            <summary>
            Retrieves the files associated with a specific release for a customer.
            </summary>
            <remarks>
            This endpoint allows retrieving the files associated with a specific release for a customer.
            The customer ID, product ID, and release ID should be included in the route parameters.
            </remarks>
            <param name="customerId">The ID of the customer.</param>
            <param name="productId">The ID of the product.</param>
            <param name="releaseId">The ID of the release.</param>
            <returns>An action result containing the list of files associated with the release for the customer.</returns>
            <response code="200">Indicates that the files associated with the release for the customer have been successfully retrieved.</response>
            <response code="401">If access to the customer or release is not allowed.</response>
            <response code="404">If the release with the specified ID does not exist.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.CustomerController.GetFileContent(System.Guid,System.Guid)">
            <summary>
            Retrieves the content of a specific file for a customer.
            </summary>
            <remarks>
            This endpoint allows retrieving the content of a specific file for a customer.
            The customer ID and file ID should be included in the route parameters.
            </remarks>
            <param name="customerId">The ID of the customer.</param>
            <param name="fileId">The ID of the file.</param>
            <returns>An action result containing the content of the file for the customer.</returns>
            <response code="200">Indicates that the content of the file for the customer has been successfully retrieved.</response>
            <response code="401">If access to the customer, release, or file is not allowed.</response>
            <response code="404">If the file with the specified ID does not exist.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.CustomerController.RegisterInstallation(System.Guid,IAG.ControlCenter.Distribution.BusinessLayer.Model.InstallationRegistration)">
            <summary>
            Registers a new installation for a customer.
            </summary>
            <remarks>
            This endpoint allows registering a new installation for a customer.
            The customer ID should be included in the route parameters, and the installation details should be provided in the request body.
            </remarks>
            <param name="customerId">The ID of the customer.</param>
            <param name="installation">The installation details.</param>
            <returns>An action result containing the information of the registered installation.</returns>
            <response code="201">Indicates that the installation has been successfully registered.</response>
            <response code="400">If the instance name is missing or empty in the installation details.</response>
            <response code="401">If access to the installation is not allowed.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.CustomerController.GetLinks(System.Guid)">
            <summary>
            Retrieves the links for a customer.
            </summary>
            <remarks>
            This endpoint allows retrieving the links associated with a customer.
            The customer ID should be included in the route parameters.
            </remarks>
            <param name="customerId">The ID of the customer.</param>
            <returns>An action result containing the links associated with the customer.</returns>
            <response code="200">Indicates that the links have been successfully retrieved.</response>
            <response code="401">If access to the customer is not allowed.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.LinkAdminController.SyncLinks(System.Collections.Generic.List{IAG.ControlCenter.Distribution.BusinessLayer.Model.LinkRegistration})">
            <summary>
            Synchronizes the links with the provided data.
            </summary>
            <remarks>
            This endpoint allows synchronizing the links by replacing the existing links with the provided data.
            The data should be provided in the request body as a list of LinkRegistration objects.
            </remarks>
            <param name="linkSyncRequest">The list of LinkRegistration objects containing the link data.</param>
            <returns>An action result containing the synchronized links.</returns>
            <response code="200">Indicates that the links have been successfully synchronized.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.ProductAdminController.GetProductsAsync">
            <summary>
            Retrieves the list of products.
            </summary>
            <remarks>
            This endpoint allows retrieving the list of products.
            </remarks>
            <returns>An action result containing the list of products.</returns>
            <response code="200">Indicates that the list of products was successfully retrieved.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.ProductAdminController.GetReleasesAsync">
            <summary>
            Retrieves the list of releases.
            </summary>
            <remarks>
            This endpoint allows retrieving the list of releases.
            </remarks>
            <returns>An action result containing the list of releases.</returns>
            <response code="200">Indicates that the list of releases was successfully retrieved.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.ProductAdminController.RegisterProduct(IAG.ControlCenter.Distribution.BusinessLayer.Model.ProductRegistration)">
            <summary>
            Registers a new product.
            </summary>
            <remarks>
            This endpoint allows registering a new product by providing the necessary product information in the request body.
            The product information should be provided as a ProductRegistration object.
            </remarks>
            <param name="productRequest">The product information to register.</param>
            <returns>An action result containing the registered product information.</returns>
            <response code="201">Indicates that the product was successfully registered.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.ProductAdminController.RegisterRelease(System.Guid,IAG.ControlCenter.Distribution.BusinessLayer.Model.ReleaseRegistration)">
            <summary>
            Registers a new release for a specific product.
            </summary>
            <remarks>
            This endpoint allows registering a new release for a specific product by providing the product ID in the route parameter and the release information in the request body.
            The release information should be provided as a ReleaseRegistration object.
            </remarks>
            <param name="productId">The ID of the product for which to register the release.</param>
            <param name="releaseRequest">The release information to register.</param>
            <returns>An action result containing the registered release information.</returns>
            <response code="201">Indicates that the release was successfully registered.</response>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.ProductAdminController.AddFiles(System.Guid,System.Collections.Generic.List{IAG.ControlCenter.Distribution.BusinessLayer.Model.FileRegistration})">
            <summary>
            Adds files to a specific release.
            </summary>
            <remarks>
            This endpoint allows adding multiple files to a specific release by providing the release ID in the route parameter and the file information in the request body.
            The file information should be provided as a list of FileRegistration objects.
            </remarks>
            <param name="releaseId">The ID of the release to which the files should be added.</param>
            <param name="fileRegistrations">The list of file information to add.</param>
            <returns>An action result containing the added files.</returns>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.ProductAdminController.SetFileContent(System.Guid,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Sets the content of a file.
            </summary>
            <remarks>
            This endpoint allows setting the content of a file by providing the file ID in the route parameter and the file content in the request body.
            The file content should be provided as a form file.
            </remarks>
            <param name="fileId">The ID of the file for which the content should be set.</param>
            <param name="file">The form file containing the file content.</param>
            <returns>An action result containing the updated file information.</returns>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.ProductAdminController.ApproveRelease(System.Guid)">
            <summary>
            Approves a release.
            </summary>
            <remarks>
            This endpoint allows approving a release by providing the release ID in the route parameter.
            </remarks>
            <param name="releaseId">The ID of the release to be approved.</param>
            <returns>An action result containing the approved release information.</returns>
        </member>
        <member name="M:IAG.ControlCenter.Distribution.CoreServer.Controller.ProductAdminController.RemoveRelease(System.Guid)">
            <summary>
            Removes a release.
            </summary>
            <remarks>
            This endpoint allows removing a release by providing the release ID in the route parameter.
            </remarks>
            <param name="releaseId">The ID of the release to be removed.</param>
            <returns>An IActionResult indicating the result of the removal operation.</returns>
        </member>
        <member name="P:IAG.ControlCenter.Mobile.BusinessLayer.Model.Backend.Color">
            <summary>
            3 byte RGB-color as string, eg. "#EFDECD"
            </summary>
        </member>
        <member name="M:IAG.ControlCenter.Mobile.CoreServer.LicenceAppController.RequestToken(IAG.Infrastructure.IdentityServer.Model.SimpleRequestTokenParameter,IAG.Infrastructure.IdentityServer.IAttackDetection,IAG.Infrastructure.Authorization.ITokenHandler,IAG.Infrastructure.IdentityServer.IRealmHandler)">
            <summary>
            Requests a token for authentication.
            </summary>
            <remarks>
            This endpoint allows anonymous access and is used to request a token for authentication.
            The token is generated based on the provided request token parameter.
            </remarks>
            <param name="requestTokenParameter">The request token parameter containing necessary information for token generation.</param>
            <param name="attackDetection">The attack detection service.</param>
            <param name="tokenHandler">The token handler service.</param>
            <param name="realmHandler">The realm handler service.</param>
            <returns>An action result containing the request token response.</returns>
            <response code="400">If the request token parameter is null.</response>
            <response code="200">If the request token is successfully generated.</response>
        </member>
        <member name="M:IAG.ControlCenter.Mobile.CoreServer.LicenceAppController.Check(IAG.ControlCenter.Mobile.BusinessLayer.Model.LicenceRequest)">
            <summary>
            Checks the validity of a license.
            </summary>
            <remarks>
            This endpoint allows checking the validity of a license based on the provided license request.
            The license request contains the necessary information for license verification.
            </remarks>
            <param name="request">The license request containing the license information.</param>
            <returns>An action result containing the license response.</returns>
            <response code="400">If the license request is null.</response>
            <response code="200">If the license is successfully checked.</response>
        </member>
        <member name="M:IAG.ControlCenter.Mobile.CoreServer.LicenceAppController.Free(IAG.ControlCenter.Mobile.BusinessLayer.Model.LicenceRequest)">
            <summary>
            Frees a license.
            </summary>
            <remarks>
            This endpoint allows freeing a license based on the provided license request.
            The license request contains the necessary information for freeing the license.
            </remarks>
            <param name="request">The license request containing the license information.</param>
            <returns>An action result containing the license free response.</returns>
            <response code="400">If the license request is null.</response>
            <response code="200">If the license is successfully freed.</response>
        </member>
        <member name="M:IAG.ControlCenter.Mobile.CoreServer.LicenceAppController.GetFlat(System.String)">
            <summary>
            Retrieves a flat list of translations.
            </summary>
            <remarks>
            This endpoint retrieves a flat list of translations based on the specified culture.
            The flat list contains translations with the specified culture and their corresponding values.
            </remarks>
            <param name="culture">The culture code for filtering translations.</param>
            <returns>An action result containing a flat list of translations.</returns>
            <response code="200">Returns the flat list of translations.</response>
        </member>
        <member name="M:IAG.ControlCenter.Mobile.CoreServer.LicenceSyncController.Sync(IAG.ControlCenter.Mobile.BusinessLayer.Model.LicenceSync)">
            <summary>
            Synchronizes mobile licences with remote systems.
            </summary>
            <remarks>
            This endpoint allows synchronization of mobile licences with remote systems.
            It updates the systems based on the provided licence sync request, removing any deleted entries.
            The method returns a list of changed mobile licences as a result of the synchronization.
            </remarks>
            <param name="request">The licence sync request containing the changes to be synchronized.</param>
            <returns>An action result containing a list of changed mobile licences.</returns>
            <response code="400">If the licence sync request is null.</response>
            <response code="200">Returns the list of changed mobile licences.</response>
        </member>
        <member name="M:IAG.ControlCenter.Mobile.CoreServer.LicenceSyncController.Update(IAG.ControlCenter.Mobile.BusinessLayer.Model.LicenceSync)">
            <summary>
            Updates systems with the provided licence sync data.
            </summary>
            <remarks>
            This endpoint is used to update systems with the licence sync data provided in the request.
            It performs the necessary operations to add and update the systems based on the provided licence sync data.
            </remarks>
            <param name="request">The licence sync data containing the changes to be applied.</param>
            <returns>An IActionResult indicating the status of the update operation.</returns>
            <response code="400">If the licence sync data is null.</response>
            <response code="200">Indicates a successful update operation.</response>
        </member>
        <member name="P:IAG.ControlCenter.Mobile.DataLayer.Model.MobileInstallation.Color">
            <summary>
            3 byte RGB-color as string, eg. "#EFDECD"
            </summary>
        </member>
    </members>
</doc>
